{
  "openapi": "3.0.0",
  "info": {
    "title": "SuntropyAI Public API",
    "description": "\n# SuntropyAI Public API Documentation\n\nWelcome to the SuntropyAI Public API! This RESTful API allows you to integrate with our AI agents and assistants platform.\n\n## Authentication\n\n**Note**: Authentication is handled by an external service. You'll need to include your API key in the request headers:\n\n```\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Rate Limiting\n\nAPI requests are rate limited to ensure fair usage:\n- **Free tier**: 100 requests per minute\n- **Pro tier**: 1000 requests per minute\n- **Enterprise**: Custom limits\n\n## Error Handling\n\nThe API uses conventional HTTP status codes:\n\n- **200**: Success\n- **400**: Bad Request - Invalid parameters\n- **401**: Unauthorized - Invalid or missing API key\n- **403**: Forbidden - Insufficient permissions\n- **404**: Not Found - Resource doesn't exist\n- **429**: Too Many Requests - Rate limit exceeded\n- **500**: Internal Server Error\n\nError responses follow this format:\n```json\n{\n  \"error\": \"ERROR_CODE\",\n  \"message\": \"Human readable error message\",\n  \"details\": {...} // Optional additional context\n}\n```\n\n## Pagination\n\nList endpoints use cursor-based pagination:\n\n- **offset**: Number of items to skip (default: 0)\n- **limit**: Maximum items to return (default: 10, max: 100)\n\n## Versioning\n\nThe API is versioned using URL path versioning (e.g., `/api/v1/`). \nThe current version is **v1**.\n\n## Features\n\n### ü§ñ Agents\n- Create and manage AI agent execution threads\n- Monitor thread status and results\n- Handle approval workflows for human-in-the-loop scenarios\n- Pause, resume, and complete threads\n\n### üéØ Assistants\n- Access custom and default assistant specializations\n- Process messages with specific assistants\n- Retrieve conversation history\n- Manage chat sessions\n\n## SDKs and Libraries\n\nOfficial SDKs are available for:\n- **JavaScript/TypeScript**: `npm install @suntropy/api-client`\n- **Python**: `pip install suntropy-api`\n- **Go**: Coming soon\n- **Ruby**: Coming soon\n\n## Support\n\n- üìß Email: api-support@suntropy.ai\n- üí¨ Discord: [Join our community](https://discord.gg/suntropy)\n- üìö Documentation: [docs.suntropy.ai](https://docs.suntropy.ai)\n- üêõ Issues: [GitHub Issues](https://github.com/suntropy/api/issues)\n    ",
    "version": "1.0.0",
    "contact": {
      "name": "SuntropyAI Support",
      "url": "https://suntropy.ai/support",
      "email": "api-support@suntropy.ai"
    },
    "termsOfService": "https://suntropy.ai/terms"
  },
  "tags": [
    {
      "name": "Agents",
      "description": "AI Agent management and execution"
    },
    {
      "name": "Assistants",
      "description": "Assistant specializations and chat management"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateThreadDto": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "The agent ID to create a thread for",
            "example": "64f5a5b8c123456789abcdef"
          },
          "message": {
            "description": "The input message to send to the agent (can be string or object)",
            "example": "Please process this request",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "state": {
            "type": "string",
            "description": "Optional initial state for the thread",
            "example": "queued",
            "enum": [
              "queued",
              "processing"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata for the thread. Contains parameters for prompt templating in the agent system prompt and tool authentication.",
            "example": {
              "propmptTemplateParams": {
                "customerName": "John Doe",
                "projectId": "PROJ-123",
                "deadline": "2025-01-15"
              },
              "tenantToken": "tenant-abc123-xyz789"
            },
            "properties": {
              "propmptTemplateParams": {
                "type": "object",
                "description": "Parameters used for template variable substitution in the agent system prompt (e.g., {{customerName}} becomes \"John Doe\")",
                "example": {
                  "customerName": "John Doe",
                  "projectId": "PROJ-123"
                }
              },
              "tenantToken": {
                "type": "string",
                "description": "Token used for authentication in tool calling operations",
                "example": "tenant-abc123-xyz789"
              }
            }
          },
          "tenantId": {
            "type": "string",
            "description": "Optional tenant ID for multi-tenant environments",
            "example": "tenant-123"
          },
          "enabledTools": {
            "description": "Optional list of tools that are available to the agent from the configured tool groups. If defined but empty, no tools will be used.",
            "example": [
              "tool_1",
              "tool_2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "agentId",
          "message"
        ]
      },
      "CreateThreadResponseDto": {
        "type": "object",
        "properties": {

        }
      },
      "PaginatedThreadsResponseDto": {
        "type": "object",
        "properties": {

        }
      },
      "ThreadResponseDto": {
        "type": "object",
        "properties": {
          "tokenUsage": {
            "type": "object",
            "description": "Enhanced token usage with cost breakdown",
            "properties": {
              "inputTokens": {
                "type": "number",
                "example": 1250
              },
              "outputTokens": {
                "type": "number",
                "example": 450
              },
              "inputCachedTokens": {
                "type": "number",
                "example": 320
              },
              "outputCachedTokens": {
                "type": "number",
                "example": 80
              },
              "totalTokens": {
                "type": "number",
                "example": 1700
              },
              "totalCachedTokens": {
                "type": "number",
                "example": 400
              },
              "cost": {
                "type": "object",
                "properties": {
                  "inputCost": {
                    "type": "number",
                    "example": 0.00125
                  },
                  "outputCost": {
                    "type": "number",
                    "example": 0.0045
                  },
                  "inputCachedCost": {
                    "type": "number",
                    "example": 0.00016
                  },
                  "outputCachedCost": {
                    "type": "number",
                    "example": 0.008
                  },
                  "totalCost": {
                    "type": "number",
                    "example": 0.00641
                  }
                }
              },
              "provider": {
                "type": "string",
                "example": "open-ai"
              },
              "model": {
                "type": "string",
                "example": "gpt-4o-mini-2024-07-18"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Thread metadata containing prompt template parameters and tenant token",
            "properties": {
              "propmptTemplateParams": {
                "type": "object",
                "description": "Parameters used for template variable substitution in the agent system prompt (e.g., {{customerName}} becomes \"John Doe\")"
              },
              "tenantToken": {
                "type": "string",
                "description": "Token used for authentication in tool calling operations"
              }
            }
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID for multi-tenant environments",
            "example": "tenant-123"
          }
        }
      },
      "HandleApprovalDto": {
        "type": "object",
        "properties": {

        }
      },
      "AgentCostResponseDto": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "Agent ID",
            "example": "64f5a5b8c123456789abcdef"
          },
          "date": {
            "type": "string",
            "description": "Date in YYYY-MM-DD format",
            "example": "2024-01-15"
          },
          "totalCost": {
            "type": "number",
            "description": "Total cost in USD",
            "example": 0.0245
          },
          "totalInputTokens": {
            "type": "number",
            "description": "Total input tokens used",
            "example": 15420
          },
          "totalOutputTokens": {
            "type": "number",
            "description": "Total output tokens used",
            "example": 3890
          },
          "totalInputCachedTokens": {
            "type": "number",
            "description": "Total cached input tokens used",
            "example": 5240
          },
          "totalOutputCachedTokens": {
            "type": "number",
            "description": "Total cached output tokens used",
            "example": 1200
          },
          "threadsCount": {
            "type": "number",
            "description": "Number of threads executed",
            "example": 5
          }
        },
        "required": [
          "agentId",
          "date",
          "totalCost",
          "totalInputTokens",
          "totalOutputTokens",
          "totalInputCachedTokens",
          "totalOutputCachedTokens",
          "threadsCount"
        ]
      },
      "AgentMonthlyCostResponseDto": {
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "Agent ID",
            "example": "64f5a5b8c123456789abcdef"
          },
          "month": {
            "type": "string",
            "description": "Month in YYYY-MM format",
            "example": "2024-01"
          },
          "totalCost": {
            "type": "number",
            "description": "Total cost in USD for the month",
            "example": 0.7854
          },
          "totalInputTokens": {
            "type": "number",
            "description": "Total input tokens used in the month",
            "example": 425680
          },
          "totalOutputTokens": {
            "type": "number",
            "description": "Total output tokens used in the month",
            "example": 89340
          },
          "totalInputCachedTokens": {
            "type": "number",
            "description": "Total cached input tokens used in the month",
            "example": 152460
          },
          "totalOutputCachedTokens": {
            "type": "number",
            "description": "Total cached output tokens used in the month",
            "example": 34720
          },
          "threadsCount": {
            "type": "number",
            "description": "Number of threads executed in the month",
            "example": 87
          }
        },
        "required": [
          "agentId",
          "month",
          "totalCost",
          "totalInputTokens",
          "totalOutputTokens",
          "totalInputCachedTokens",
          "totalOutputCachedTokens",
          "threadsCount"
        ]
      },
      "AssistantSpecializationDto": {
        "type": "object",
        "properties": {

        }
      },
      "ProcessMessageDto": {
        "type": "object",
        "properties": {

        }
      },
      "AssistantResponseDto": {
        "type": "object",
        "properties": {

        }
      },
      "ChatHistoryDto": {
        "type": "object",
        "properties": {

        }
      },
      "PaginatedChatHistoryDto": {
        "type": "object",
        "properties": {

        }
      },
      "ChatHistoryFiltersDto": {
        "type": "object",
        "properties": {

        }
      },
      "HealthCheckDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Service status",
            "example": "ok",
            "enum": [
              "ok",
              "error"
            ]
          },
          "version": {
            "type": "string",
            "description": "Service version",
            "example": "1.0.0"
          },
          "timestamp": {
            "type": "string",
            "description": "Current timestamp",
            "example": "2025-06-12T10:30:00Z"
          },
          "uptime": {
            "type": "number",
            "description": "Service uptime in seconds",
            "example": 3600
          }
        },
        "required": [
          "status",
          "version",
          "timestamp",
          "uptime"
        ]
      }
    }
  },
  "paths": {
    "/api/v1/agents/{agentId}/threads": {
      "post": {
        "operationId": "PublicAgentsV1Controller_createThread",
        "summary": "Create a new thread for an agent",
        "description": "Creates a new execution thread for the specified agent with the provided message.",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The ID of the agent to notify",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Thread created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateThreadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "404": {
            "description": "Agent not found"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "operationId": "PublicAgentsV1Controller_getAgentThreads",
        "summary": "Get threads for an agent",
        "description": "Retrieves a paginated list of threads for the specified agent with optional filtering.",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "description": "Filter by thread state",
            "schema": {
              "enum": [
                "queued",
                "processing",
                "completed",
                "failed",
                "terminated",
                "paused",
                "paused_for_approval",
                "approval_rejected",
                "waiting_for_response",
                "paused_for_resume",
                "handed_off"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateOrder",
            "required": false,
            "in": "query",
            "description": "Sort order by date",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "durationOrder",
            "required": false,
            "in": "query",
            "description": "Sort order by duration",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "tokensOrder",
            "required": false,
            "in": "query",
            "description": "Sort order by tokens",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Threads retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedThreadsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getThreadById",
        "summary": "Get a specific thread by ID",
        "description": "Retrieves detailed information about a specific thread.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "withTasks",
            "required": false,
            "in": "query",
            "description": "Include tasks in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "patch": {
        "operationId": "PublicAgentsV1Controller_updateThread",
        "summary": "Update a thread",
        "description": "Updates the specified thread with the provided data.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/approval": {
      "post": {
        "operationId": "PublicAgentsV1Controller_handleApproval",
        "summary": "Handle thread approval request",
        "description": "Processes an approval request for a thread that requires user confirmation.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread requiring approval",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HandleApprovalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Approval handled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Thread not found"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/complete": {
      "post": {
        "operationId": "PublicAgentsV1Controller_completeThread",
        "summary": "Complete a thread",
        "description": "Marks a thread as completed with the specified final state.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread to complete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Error completing thread"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/pause": {
      "post": {
        "operationId": "PublicAgentsV1Controller_pauseThread",
        "summary": "Pause a thread",
        "description": "Pauses the execution of a running thread.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread to pause",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread paused successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/resume": {
      "post": {
        "operationId": "PublicAgentsV1Controller_resumeThread",
        "summary": "Resume a thread",
        "description": "Resumes the execution of a paused thread.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread to resume",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread resumed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/evaluate": {
      "post": {
        "operationId": "PublicAgentsV1Controller_evaluateThread",
        "summary": "Evaluate a thread",
        "description": "Triggers evaluation of a completed thread based on multiple criteria.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread to evaluate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread evaluation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "evaluation": {
                      "type": "object",
                      "properties": {
                        "overallScore": {
                          "type": "number",
                          "minimum": 1,
                          "maximum": 10
                        },
                        "evaluationTimestampMs": {
                          "type": "number"
                        },
                        "evaluationModel": {
                          "type": "string"
                        },
                        "generalFeedback": {
                          "type": "string"
                        },
                        "criteria": {
                          "type": "object",
                          "properties": {
                            "instructionFollowing": {
                              "type": "object",
                              "properties": {
                                "score": {
                                  "type": "number",
                                  "minimum": 1,
                                  "maximum": 10
                                },
                                "reasoning": {
                                  "type": "string"
                                },
                                "observations": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "taskPlanning": {
                              "type": "object",
                              "properties": {
                                "score": {
                                  "type": "number",
                                  "minimum": 1,
                                  "maximum": 10
                                },
                                "reasoning": {
                                  "type": "string"
                                },
                                "observations": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "taskExecution": {
                              "type": "object",
                              "properties": {
                                "score": {
                                  "type": "number",
                                  "minimum": 1,
                                  "maximum": 10
                                },
                                "reasoning": {
                                  "type": "string"
                                },
                                "observations": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "toolUsageEffectiveness": {
                              "type": "object",
                              "properties": {
                                "score": {
                                  "type": "number",
                                  "minimum": 1,
                                  "maximum": 10
                                },
                                "reasoning": {
                                  "type": "string"
                                },
                                "observations": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "executionFinalization": {
                              "type": "object",
                              "properties": {
                                "score": {
                                  "type": "number",
                                  "minimum": 1,
                                  "maximum": 10
                                },
                                "reasoning": {
                                  "type": "string"
                                },
                                "observations": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - thread not found or not completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/evaluation": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getThreadEvaluation",
        "summary": "Get thread evaluation",
        "description": "Retrieves the evaluation results for a thread.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread evaluation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "evaluation": {
                      "type": "object",
                      "properties": {
                        "overallScore": {
                          "type": "number",
                          "minimum": 1,
                          "maximum": 10
                        },
                        "evaluationTimestampMs": {
                          "type": "number"
                        },
                        "evaluationModel": {
                          "type": "string"
                        },
                        "generalFeedback": {
                          "type": "string"
                        },
                        "criteria": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Thread or evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/evaluations": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getThreadEvaluations",
        "summary": "Get all thread evaluations",
        "description": "Retrieves all evaluation results for a thread.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread evaluations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "evaluations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "evaluationId": {
                            "type": "string"
                          },
                          "overallScore": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 10
                          },
                          "evaluationTimestampMs": {
                            "type": "number"
                          },
                          "evaluationModel": {
                            "type": "string"
                          },
                          "generalFeedback": {
                            "type": "string"
                          },
                          "criteria": {
                            "type": "object"
                          },
                          "customCriteria": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Thread not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/threads/{threadId}/evaluations/{evaluationId}": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getThreadEvaluationById",
        "summary": "Get specific thread evaluation by ID",
        "description": "Retrieves a specific evaluation result by evaluation ID for a thread.",
        "parameters": [
          {
            "name": "threadId",
            "required": true,
            "in": "path",
            "description": "The ID of the thread",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evaluationId",
            "required": true,
            "in": "path",
            "description": "The ID of the evaluation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread evaluation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "evaluation": {
                      "type": "object",
                      "properties": {
                        "evaluationId": {
                          "type": "string"
                        },
                        "overallScore": {
                          "type": "number",
                          "minimum": 1,
                          "maximum": 10
                        },
                        "evaluationTimestampMs": {
                          "type": "number"
                        },
                        "evaluationModel": {
                          "type": "string"
                        },
                        "generalFeedback": {
                          "type": "string"
                        },
                        "criteria": {
                          "type": "object"
                        },
                        "customCriteria": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Thread or evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/agents/{agentId}/evaluation-config": {
      "put": {
        "operationId": "PublicAgentsV1Controller_updateAgentEvaluationConfig",
        "summary": "Update agent evaluation configuration",
        "description": "Update evaluation settings and custom criteria for an agent",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the agent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation configuration updated successfully"
          },
          "404": {
            "description": "Agent not found"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "get": {
        "operationId": "PublicAgentsV1Controller_getAgentEvaluationConfig",
        "summary": "Get agent evaluation configuration",
        "description": "Retrieve evaluation settings and custom criteria for an agent",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the agent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation configuration retrieved successfully"
          },
          "404": {
            "description": "Agent not found"
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/agents/{agentId}/costs/daily": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getAgentDailyCosts",
        "summary": "Get daily costs for an agent",
        "description": "Retrieves daily cost breakdown for the specified agent within a date range.",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date (YYYY-MM-DD format)",
            "example": "2024-01-01",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (YYYY-MM-DD format)",
            "example": "2024-01-31",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Daily costs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentCostResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/agents/{agentId}/costs/monthly": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getAgentMonthlyCosts",
        "summary": "Get monthly costs for an agent",
        "description": "Retrieves monthly cost breakdown for the specified agent within a month range.",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startMonth",
            "required": false,
            "in": "query",
            "description": "Start month (YYYY-MM format)",
            "example": "2024-01",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endMonth",
            "required": false,
            "in": "query",
            "description": "End month (YYYY-MM format)",
            "example": "2024-12",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly costs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentMonthlyCostResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/agents/agents/{agentId}/costs/summary": {
      "get": {
        "operationId": "PublicAgentsV1Controller_getAgentCostSummary",
        "summary": "Get cost summary for an agent",
        "description": "Retrieves cost summary for today and current month for the specified agent.",
        "parameters": [
          {
            "name": "agentId",
            "required": true,
            "in": "path",
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cost summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "today": {
                      "$ref": "#/components/schemas/AgentCostResponseDto"
                    },
                    "currentMonth": {
                      "$ref": "#/components/schemas/AgentMonthlyCostResponseDto"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Agents"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/assistants": {
      "get": {
        "operationId": "PublicAssistantsV1Controller_getAssistantSpecializations",
        "summary": "Get all available assistant specializations",
        "description": "Retrieves a list of all available assistant specializations (both default and custom).",
        "parameters": [
          {
            "name": "external",
            "required": false,
            "in": "query",
            "description": "Include only assistants configured for external access",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assistant specializations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssistantSpecializationDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/assistants/{identifier}": {
      "get": {
        "operationId": "PublicAssistantsV1Controller_getAssistantSpecialization",
        "summary": "Get a specific assistant specialization",
        "description": "Retrieves detailed information about a specific assistant specialization by its identifier.",
        "parameters": [
          {
            "name": "identifier",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the assistant specialization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assistant specialization retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantSpecializationDto"
                }
              }
            }
          },
          "404": {
            "description": "Assistant specialization not found"
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/assistants/{identifier}/messages": {
      "post": {
        "operationId": "PublicAssistantsV1Controller_processMessage",
        "summary": "Process a message with an assistant",
        "description": "Sends a message to the specified assistant specialization and returns the response.",
        "parameters": [
          {
            "name": "identifier",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the assistant specialization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessMessageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "404": {
            "description": "Assistant specialization not found"
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/assistants/{identifier}/chats/{chatUid}": {
      "get": {
        "operationId": "PublicAssistantsV1Controller_getChatHistory",
        "summary": "Get chat history for a conversation",
        "description": "Retrieves the chat history for a specific conversation with an assistant.",
        "parameters": [
          {
            "name": "identifier",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the assistant specialization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatUid",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the chat conversation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatHistoryDto"
                }
              }
            }
          },
          "404": {
            "description": "Chat history not found"
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/assistants/{identifier}/chats": {
      "get": {
        "operationId": "PublicAssistantsV1Controller_getChatHistories",
        "summary": "Get chat histories for an assistant",
        "description": "Retrieves a paginated list of chat histories for the specified assistant.",
        "parameters": [
          {
            "name": "identifier",
            "required": true,
            "in": "path",
            "description": "The unique identifier of the assistant specialization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "omitContent",
            "required": false,
            "in": "query",
            "description": "Exclude chat content from response (metadata only)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat histories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChatHistoryDto"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/assistants/chats": {
      "post": {
        "operationId": "PublicAssistantsV1Controller_getAllChatHistories",
        "summary": "Get all chat histories with filters",
        "description": "Retrieves a paginated list of chat histories across all assistants with optional filters. Send an empty JSON object {} if no filters are needed.",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of items to return",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "omitContent",
            "required": false,
            "in": "query",
            "description": "Exclude chat content from response (metadata only)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatHistoryFiltersDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat histories retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChatHistoryDto"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthV1Controller_getHealth",
        "summary": "Health check endpoint",
        "description": "Returns the current health status of the API service.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckDto"
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/docs/{filename}": {
      "get": {
        "operationId": "DocsV1Controller_getRenderedMarkdownFile",
        "summary": "Get rendered markdown documentation page",
        "description": "Serves markdown documentation files as rendered HTML pages",
        "parameters": [
          {
            "name": "filename",
            "required": true,
            "in": "path",
            "description": "Name of the markdown file (without .md extension)",
            "example": "README",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rendered HTML page",
            "content": {
              "text/html": {
                "example": "\u003Chtml\u003E\u003Cbody\u003E\u003Ch1\u003EDocumentation\u003C/h1\u003E\u003C/body\u003E\u003C/html\u003E"
              }
            }
          }
        },
        "tags": [
          "Documentation"
        ]
      }
    },
    "/api/v1/docs/{filename}.md": {
      "get": {
        "operationId": "DocsV1Controller_getMarkdownFile",
        "summary": "Get raw markdown documentation file",
        "description": "Serves raw markdown documentation files for download",
        "parameters": [
          {
            "name": "filename",
            "required": true,
            "in": "path",
            "description": "Name of the markdown file (without .md extension)",
            "example": "README",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Markdown file content",
            "content": {
              "text/markdown": {
                "example": "# Documentation\n\nThis is a markdown file..."
              }
            }
          },
          "404": {
            "description": "Markdown file not found"
          }
        },
        "tags": [
          "Documentation"
        ]
      }
    },
    "/api/v1/docs": {
      "get": {
        "operationId": "DocsV1Controller_getDocumentationIndex",
        "summary": "Documentation index page",
        "description": "Returns an HTML page listing all available documentation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "HTML documentation index page"
          }
        },
        "tags": [
          "Documentation"
        ]
      }
    }
  }
}